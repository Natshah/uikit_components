<?php

/**
 * @file
 * UIkit Components.
 *
 * Companion module to the UIkit base theme to provide additional components and
 * functionality.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\uikit_components\UIkitComponents;

UIkitComponents::loadIncludeFile('inc', 'uikit_components', 'module', 'alter', 'includes');

/**
 * Implements hook_help().
 */
function uikit_components_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.uikit_components':
      $output = '<p>' . t('The UIkit components module provides additional components and functionality to the UIkit base theme and various Drupal core modules. Some aspects of the frontend cannot be themed without going through the backend, such as empty navbar links. With this module we can add more functionality to the UIkit frontend through the Drupal backend without the need for contributed modules which may add more functionality than needed.') . '</p>';
      break;

    case 'uikit_components.admin':
      $output = '<p>' . t('Configuration for the UIkit Components module.') . '</p>';
      break;

    case 'uikit_components.core':
      $output = '<p>' . t('UIkit offers over 30 modular and extendible components, which can be combined with each other. Components are divided into different compartments according to their purpose and functionality. This form allows you to control how some of these components are used.') . '</p>';
      break;

    case 'uikit_components.advanced':
      $output = '<p>' . t("UIkit offers some advanced components that are not included in the UIkit core framework. Usually you wouldn't use these components in your everyday website. They include stuff like nestables and datepickers, which will come in handy, if you create advanced user interfaces like administration areas. This form allows you to control how some of these components are used.") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function uikit_components_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'uikit_components') . '/templates';

  return [
    'menu__default' => [
      'path' => "$path/navigation",
      'template' => 'menu--default',
      'preprocess functions' => ['template_preprocess_menu__default'],
    ],
    'menu__uk_menu' => [
      'path' => "$path/navigation",
      'template' => 'menu--uk-menu',
    ],
    'menu__uk_nav' => [
      'path' => "$path/navigation",
      'template' => 'menu--uk-nav',
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function uikit_components_entity_type_alter(array &$entity_types) {
  $config = \Drupal::config('uikit_components.settings');

  if ($config->get('additional_menu_styles')) {
    // Replace form class for menu add/edit forms with our own form class.
    /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
    $entity_types['menu']
      ->setFormClass('add', 'Drupal\uikit_components\Form\MenuEditForm')
      ->setFormClass('edit', 'Drupal\uikit_components\Form\MenuEditForm');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function uikit_components_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_link_options = $menu_link->link->first()->options ?: [];

  // Translatable string arguments.
  $t_args = [
    ':navbar' => Url::fromUri('https://getuikit.com/v2/docs/navbar.html')->toString(),
  ];

  // UIkit navbar component options.
  $form['menu_item_type'] = [
    '#type' => 'select',
    '#title' => t('Menu item type'),
    '#default_value' => !empty($menu_link_options['menu_item_type']) ? $menu_link_options['menu_item_type'] : 0,
    '#options' => [
      0 => t('Normal menu item'),
      'nav_header' => t('Navigation header'),
      'nav_divider' => t('Navigation divider'),
    ],
    '#description' => t('Select the type of menu item this is. <em class="placeholder">Navigation header</em> and <em class="placeholder">Navigation divider</em> are special menu items from the <a href=":navbar" target="_blank">UIkit navbar component</a>.', $t_args),
  ];

  $form['actions']['submit']['#submit'][] = 'uikit_components_menu_link_content_form_submit';
}

/**
 * Process handler for the menu link content form.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function uikit_components_menu_link_content_form_submit($form, FormStateInterface $form_state) {
  $menu_item_type = $form_state->getValue('menu_item_type');
  $type = empty($menu_item_type) ? 'normal_menu_item' : $menu_item_type;

  $options = [
    'menu_item_type' => $type,
  ];

  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_link_options = $menu_link->link->first()->options;

  $merged = array_merge($menu_link_options, $options);

  $menu_link->link->first()->options = $merged;
  $menu_link->save();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function uikit_components_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $block = $form_state->getFormObject()->getEntity();
  $region = $block->getRegion();

  if ($region == 'navbar') {
    // Add navbar alignment setting to navbar blocks.
    $form['uikit_navbar_alignment'] = [
      '#type' => 'select',
      '#title' => t('UIkit navbar alignment'),
      '#default_value' => $block->getThirdPartySetting('uikit_components', 'uikit_navbar_alignment'),
      '#options' => [
        'left' => t('Left'),
        'center' => t('Center'),
        'right' => t('Right'),
      ],
      '#description' => t('Select the alignment of this menu in the UIkit navbar region.'),
      '#weight' => 0,
    ];

    // Add a form entity builder.
    $form['#entity_builders'][] = 'uikit_components_form_block_form_builder';
  }
}

/**
 * Entity builder for the block configuration entity.
 */
function uikit_components_form_block_form_builder($entity_type, Drupal\block\Entity\Block $block, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->getValue('uikit_navbar_alignment')) {
    $block->setThirdPartySetting('uikit_components', 'uikit_navbar_alignment', $form_state->getValue('uikit_navbar_alignment'));
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_menu__default(&$variables) {
  $menu_name = $variables['menu_name'];
  $nav_width_classes = UIkitComponents::getNavWidthClasses($menu_name);
  $variables['wrapper_attributes'] = FALSE;

  if ($nav_width_classes) {
    $wrapper_attributes = new Attribute();
    $classes = explode(' ', $nav_width_classes);

    foreach ($classes as $class) {
      $wrapper_attributes->addClass($class);
    }

    $variables['wrapper_attributes'] = $wrapper_attributes;
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_menu__uk_menu(&$variables) {
  $menu_name = $variables['menu_name'];
  $menu_style = UIkitComponents::getMenuStyle($menu_name);
  $large_list = UIkitComponents::getLargeList($menu_name);

  if ($menu_style) {
    $attributes = new Attribute();

    switch ($menu_style) {
      case 'uk-list':
      case 'uk-list-bullet':
      case 'uk-list-divider':
      case 'uk-list-striped':
        $attributes->addClass('uk-list');
        break;

      case 'uk-nav':
        $attributes->addClass('uk-nav');
        break;

      case 'uk-subnav':
      case 'uk-subnav-divider':
      case 'uk-subnav-pill':
        $attributes->addClass('uk-subnav');
        break;
    }

    if ($menu_style != 'uk-list' && $menu_style != 'uk-nav' && $menu_style != 'uk-subnav') {
      $attributes->addClass($menu_style);
    }
    elseif ($menu_style == 'uk-nav') {
      $nav_accordion = UIkitComponents::getNavAccordion($menu_name);
      $nav_style_modifier = UIkitComponents::getNavStyleModifier($menu_name);
      $nav_center = UIkitComponents::getNavCenterModifier($menu_name);

      if ($nav_accordion) {
        $attributes->addClass('uk-nav-parent-icon');
        $attributes->setAttribute('uk-nav', '');
      }

      if ($nav_style_modifier) {
        $attributes->addClass($nav_style_modifier);
      }

      if ($nav_center) {
        $attributes->addClass('uk-nav-center');
      }

      foreach ($variables['items'] as $index => $item) {
        if ($item['below']) {
          $variables['items'][$index]['attributes']->addClass('uk-parent');
        }
      }
    }

    if ($large_list) {
      $attributes->addClass('uk-list-large');
    }

    $variables['attributes'] = $attributes;
  }

  $nav_width_classes = UIkitComponents::getNavWidthClasses($menu_name);
  $variables['wrapper_attributes'] = FALSE;

  if ($nav_width_classes) {
    $wrapper_attributes = new Attribute();
    $classes = explode(' ', $nav_width_classes);

    foreach ($classes as $class) {
      $wrapper_attributes->addClass($class);
    }

    $variables['wrapper_attributes'] = $wrapper_attributes;
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_menu__uk_nav(&$variables) {
  $menu_name = $variables['menu_name'];
  $menu_style = UIkitComponents::getMenuStyle($menu_name);

  if ($menu_style) {
    $attributes = new Attribute();
    $attributes->addClass('uk-nav');

    $nav_style_modifier = UIkitComponents::getNavStyleModifier($menu_name);
    $nav_center = UIkitComponents::getNavCenterModifier($menu_name);

    if ($nav_style_modifier) {
      $attributes->addClass($nav_style_modifier);
    }

    if ($nav_center) {
      $attributes->addClass('uk-nav-center');
    }

    foreach ($variables['items'] as $index => $item) {
      if ($item['below']) {
        $variables['items'][$index]['attributes']->addClass('uk-parent');
      }
    }

    $variables['attributes'] = $attributes;
  }

  $nav_width_classes = UIkitComponents::getNavWidthClasses($menu_name);
  $variables['wrapper_attributes'] = FALSE;

  if ($nav_width_classes) {
    $wrapper_attributes = new Attribute();
    $classes = explode(' ', $nav_width_classes);

    foreach ($classes as $class) {
      $wrapper_attributes->addClass($class);
    }

    $variables['wrapper_attributes'] = $wrapper_attributes;
  }
}
